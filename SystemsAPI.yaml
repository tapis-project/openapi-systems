openapi: 3.0.3
info:
  title: Tapis Systems API
  description: The Tapis Systems API provides for management of Tapis Systems including permissions, credentials and Scheduler Profiles.
  version: '1.1.0'
  termsOfService: "https://tapis-project.org"
  contact:
    name: "Systems API - CICSupport"
    url: "https://tapis-project.org"
    email: "cicsupport@tacc.utexas.edu"
  license:
    name: 3-Clause BSD License
    url: 'https://opensource.org/licenses/BSD-3-Clause'
externalDocs:
  description: Tapis Project
  url: 'https://tapis-project.org'
servers:
  - url: 'http://localhost:8080/'
    description: Local test environment
    variables: {}
  - url: 'https://dev.develop.tapis.io/'
    description: Development environment
    variables: {}
security:
  - TapisJWT: []
tags:
  - name: General
    description: General service health and readiness
  - name: Systems
    description: Manage Tapis system resources. Create, retrieve, update, etc.
  - name: Credentials
    description: Manage Tapis system user access credentials. Create, update, remove, etc.
  - name: Permissions
    description: Manage Tapis permissions for system resources. Grant, revoke and retrieve.
  - name: Scheduler Profiles
    description: Manage Tapis scheduler profile resources. Create, retrieve and delete.

# ------------------------------------------------------------------------------
# --- Paths -------------------------------------------------------------------
# ------------------------------------------------------------------------------
paths:

  # --- Paths for /systems -----------------------------------------------------
  '/v3/systems/healthcheck':
    get:
      tags:
        - General
      description: Health check.
      operationId: healthCheck
      responses:
        '200':
          description: Message received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
  '/v3/systems/readycheck':
    get:
      tags:
        - General
      description: Ready check.
      operationId: readyCheck
      responses:
        '200':
          description: Service ready.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '503':
          description: Service unavailable.

  '/v3/systems':
    get:
      tags:
        - Systems
      summary: Retrieve systems
      description: Retrieve list of systems. Use search and select query parameters to limit results.
      operationId: getSystems
      parameters:
        - name: search
          in: query
          description: Search conditions as a single query paramter. For example search=(id.like.MySys*)~(enabled.eq.true)
          schema:
            type: string
        - name: limit
          in: query
          description: Limit number of items returned. For example limit=10. Use -1 for unlimited. Default is 100.
          schema:
            type: integer
            default: 100
        - name: orderBy
          in: query
          description: Attribute for sorting. Direction may be included. For example orderBy=id(desc). Default direction is (asc).
          schema:
            type: string
        - name: skip
          in: query
          description: Number of items to skip. Use one of skip or startAfter. For example skip=10. Default is 0.
          schema:
            type: integer
        - name: startAfter
          in: query
          description: Where to start when sorting. Use one of skip or startAfter. Must also specify orderBy. For example, limit=10&orderBy=id(asc)&startAfter=my.sys1
          schema:
            type: string
        - name: computeTotal
          in: query
          description: Compute total number of results that would have been returned if unlimited. Default is false.
          schema:
            type: boolean
            default: false
        - name: select
          in: query
          description: List of attributes to be included as part of each result item. For example select=id,owner,host
          schema:
            type: string
            default: 'summaryAttributes'
        - name: showDeleted
          in: query
          description: Indicates if Systems marked as deleted should be shown in the results. Default is false.
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/RespSystems'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - Systems
      summary: Create a system
      description: |
        Create a system using a request body. System name must be unique within a tenant and can be composed of
        alphanumeric characters and the following special characters [-._~].
        Name must begin with an alphabetic character and can be no more than 80 characters in length.
        Description is optional with a maximum length of 2048 characters.

        By default any credentials provided for LINUX type systems are verified. Use query parameter
        skipCredentialCheck=true to bypass initial verification of credentials.

        Note that certain attributes in the request body (such as tenant) are allowed but ignored so that the JSON
        result returned by a GET may be modified and used when making a POST request to create a system.
        The attributes that are allowed but ignored are

          - tenant
          - uuid
          - deleted
          - created
          - updated
      operationId: createSystem
      parameters:
        - name: skipCredentialCheck
          in: query
          description: Bypass initial check for valid credentials. Default is false.
          schema:
            type: boolean
            default: false
      requestBody:
        required: true
        description: A JSON object specifying information for the system to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPostSystem'
      responses:
        '201':
          description: System created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '409':
          description: System already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/search':
    get:
      tags:
        - Systems
      summary: Retrieve list of systems matching search conditions specified as query parameters
      description: Retrieve details for systems. Use query parameters to specify search conditions. For example owner.eq=jdoe&port.gt=1024
      operationId: searchSystemsQueryParameters
      parameters:
        - name: freeFormParameterName
          in: query
          description: Free form query parameters.
          explode: true
          allowEmptyValue: true
          schema:
            type: object
            additionalProperties:
              type: string
          style: form
        - name: limit
          in: query
          description: Limit number of items returned. For example limit=10. Use -1 for unlimited. Default is 100.
          schema:
            type: integer
            default: 100
        - name: orderBy
          in: query
          description: Attribute for sorting. Direction may be included. For example orderBy=id(desc). Default direction is (asc).
          schema:
            type: string
        - name: skip
          in: query
          description: Number of items to skip. Use one of skip or startAfter. For example skip=10. Default is 0.
          schema:
            type: integer
        - name: startAfter
          in: query
          description: Where to start when sorting. Use one of skip or startAfter. Must also specify orderBy. For example, limit=10&orderBy=id(asc)&startAfter=my.sys2
          schema:
            type: string
        - name: computeTotal
          in: query
          description: Compute total number of results that would have been returned if unlimited. Default is false.
          schema:
            type: boolean
            default: false
        - name: select
          in: query
          description: List of attributes to be included as part of each result item. For example select=id,owner,host
          schema:
            type: string
            default: 'summaryAttributes'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSystems'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - Systems
      summary: Retrieve list of systems matching search conditions
      description: |
        Retrieve details for systems. Use request body to specify SQL-like search conditions.
      operationId: searchSystemsRequestBody
      parameters:
        - name: limit
          in: query
          description: Limit number of items returned. For example limit=10. Use -1 for unlimited. Default is 100.
          schema:
            type: integer
            default: 100
        - name: orderBy
          in: query
          description: Attribute for sorting. Direction may be included. For example orderBy=id(desc). Default direction is (asc).
          schema:
            type: string
        - name: skip
          in: query
          description: Number of items to skip. Use one of skip or startAfter. For example skip=10. Default is 0.
          schema:
            type: integer
        - name: startAfter
          in: query
          description: Where to start when sorting. Use one of skip or startAfter. Must also specify orderBy. For example, limit=10&orderBy=id(asc)&startAfter=my.sys1
          schema:
            type: string
        - name: computeTotal
          in: query
          description: Compute total number of results that would have been returned if unlimited. Default is false.
          schema:
            type: boolean
            default: false
        - name: select
          in: query
          description: List of attributes to be included as part of each result item. For example select=id,owner,host
          schema:
            type: string
            default: 'summaryAttributes'
      requestBody:
        required: true
        description: A JSON object specifying SQL-like search conditions as an array of strings. Strings are concatenated to form full search query.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqSearchSystems'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSystems'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/match/constraints':
    post:
      tags:
        - Systems
      summary: Retrieve systems satisfying specified constraint conditions (WARNING - not yet supported)
      description: |
        *WARNING Capability constraint matching is not yet supported.*
        Retrieve details for systems. Use request body to specify constraint conditions as an SQL-like WHERE clause.
      operationId: matchConstraints
      requestBody:
        required: true
        description: A JSON object specifying SQL-like constraint conditions as an array of strings. Strings are concatenated to form full query.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqMatchConstraints'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSystems'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/{systemId}':
    get:
      tags:
        - Systems
      summary: Retrieve system details
      description: |
        Retrieve information for a system given the system name. Use query parameter returnCredentials=true to have
        effectiveUserId credentials included in the response. Use query parameter authnMethod=<method> to override
        default authn method.
      operationId: getSystem
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: returnCredentials
          in: query
          description: Highly restricted. Only certain Tapis services are authorized to get credentials.
          schema:
            type: boolean
            default: false
        - name: authnMethod
          in: query
          description: Desired authentication method to use when fetching credentials, default method used if this is null.
          schema:
            type: string
            default: ''
        - name: requireExecPerm
          in: query
          description: check for EXECUTE permission as well as READ permission.
          schema:
            type: boolean
            default: false
        - name: select
          in: query
          description: List of attributes to be included as part of the result item. For example select=id,owner,host
          schema:
            type: string
            default: 'allAttributes'
      responses:
        '200':
          description: System found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSystem'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    patch:
      tags:
        - Systems
      summary: Update selected attributes of a system
      description: |
        Update selected attributes of a system. Request body may only contain updatable attributes. System must exist.

        Attributes that may not be updated via PATCH are

          - id
          - systemType
          - owner
          - enabled
          - bucketName
          - rootDir
          - isDtn
          - canExec

        Note that the attributes owner and enabled may be modified using other endpoints.
      operationId: patchSystem
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      requestBody:
        required: true
        description: A JSON object specifying changes to be applied.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPatchSystem'
      responses:
        '200':
          description: System updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    put:
      tags:
        - Systems
      summary: Update all updatable attributes of a system
      description: |
        Update all updatable attributes of a system using a request body identical to POST. System must exist.

        By default any credentials provided for LINUX type systems are verified. Use query parameter
        skipCredentialCheck=true to bypass initial verification of credentials.

        Note that certain attributes in the request body (such as tenant) are allowed but ignored so that the JSON
        result returned by a GET may be modified and used when making a PUT request to update a system.

        The attributes that are allowed but ignored for both PUT and POST are

          - tenant
          - uuid
          - deleted
          - created
          - updated

        In addition for a PUT operation the following non-updatable attributes are allowed but ignored

          - id
          - systemType
          - owner
          - enabled
          - bucketName
          - rootDir
          - isDtn
          - canExec

        Note that the attributes owner and enabled may be modified using other endpoints.
      operationId: putSystem
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: skipCredentialCheck
          in: query
          description: Bypass initial check for valid credentials. Default is false.
          schema:
            type: boolean
            default: false
      requestBody:
        required: true
        description: A JSON object specifying changes to be applied.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPutSystem'
      responses:
        '200':
          description: System updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '409':
          description: System already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/{systemId}/isEnabled':
    get:
      tags:
        - Systems
      summary: Check if system is currently enabled
      description: |
        Check if a system is currently enabled, i.e. available for use.
      operationId: isEnabled
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: Check successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBoolean'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/{systemId}/enable':
    post:
      tags:
        - Systems
      summary: Mark a system availabe for use
      description: |
        Mark a system available for use.
      operationId: enableSystem
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: System enabled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/{systemId}/disable':
    post:
      tags:
        - Systems
      summary: Mark a system unavailabe for use
      description: |
        Mark a system unavailable for use.
      operationId: disableSystem
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: System disabled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/{systemId}/delete':
    post:
      tags:
        - Systems
      summary: Mark a system as deleted
      description: |
        Mark a system as deleted. System will not appear in queries unless explicitly requested.
      operationId: deleteSystem
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: System deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/{systemId}/undelete':
    post:
      tags:
        - Systems
      summary: Mark a system as not deleted
      description: |
        Mark a system as not deleted. System will appear in queries.
      operationId: undeleteSystem
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: System undeleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/{systemId}/changeOwner/{userName}':
    post:
      tags:
        - Systems
      summary: Change system owner
      description: |
        Change owner of a system.
      operationId: changeSystemOwner
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
      responses:
        '200':
          description: System owner updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  # --- Paths for /credentials ------------------------------------------------
  '/v3/systems/credential/{systemId}/user/{userName}':
    get:
      tags:
        - Credentials
      summary: Retrieve user credentials for a system and target user
      description: |
        Highly restricted. Only certain Tapis services authorized. Retrieve credentials for given system, *target user* and authentication method.

        Note that user making the request and *target user* may be different and frequently are different.

        Desired authentication method may be specified using query parameter authnMethod=<method>. If desired authentication method
        not specified then credentials for the system's default authentication method are returned.

        The result includes the field authnMethod indicating the authentication method associated with the returned credentials.
      operationId: getUserCredential
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
        - name: authnMethod
          in: query
          description: Desired authentication method to use when fetching credentials, default method used if not provided.
          schema:
            type: string
            default: ''
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespCredential'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - Credentials
      summary: Create or update user credentials for a system and target user
      description: |
        Create or update credentials in the Security Kernel for given system and *target user* using a request body.
        Requester must be owner of the system. Credentials for multiple authentication methods may be provided.

        Note that user making the request and *target user* may be different and frequently are different.

        By default any credentials provided for LINUX type systems are verified. Use query parameter
        skipCredentialCheck=true to bypass initial verification of credentials.

        Note that the attribute authnMethod is allowed but ignored so that the JSON result returned by a GET
        may be modified and used when making a POST to update credentials.
      operationId: createUserCredential
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
        - name: skipCredentialCheck
          in: query
          description: Bypass initial check for valid credentials. Default is false.
          schema:
            type: boolean
            default: false
      requestBody:
        required: true
        description: A JSON object specifying credentials.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPostCredential'
      responses:
        '200':
          description: Credentials updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    delete:
      tags:
        - Credentials
      summary: Remove user credentials for a system and target user
      description: |
        Remove credentials from the Security Kernel for given system and *target user*. Requester must be owner of the system.

        Note that user making the request and *target user* may be different and frequently are different.
      operationId: removeUserCredential
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
      responses:
        '200':
          description: Credentials removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  # --- Paths for /perms -------------------------------------------------------
  '/v3/systems/perms/{systemId}/user/{userName}':
    get:
      tags:
        - Permissions
      summary: Retrieve system user permissions
      description: |
        Retrieve all system related permissions for a given system and user.
      operationId: getUserPerms
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - Permissions
      summary: Grant system user permissions
      description: |
        Create permissions in the Security Kernel for a user. Requester must be owner of the system.
        Permissions are READ, MODIFY, EXECUTE.
      operationId: grantUserPerms
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
      requestBody:
        required: true
        description: A JSON object specifying a list of permissions.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPerms'
      responses:
        '200':
          description: Permissions granted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/systems/perms/{systemId}/user/{userName}/revoke':
    post:
      tags:
        - Permissions
      summary: Revoke system user permissions
      description: |
        Remove permissions from the Security Kernel for a user. Requester must be owner of the system.
        Permissions are READ, MODIFY, EXECUTE.
      operationId: revokeUserPerms
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
      requestBody:
        required: true
        description: A JSON object specifying a list of permissions.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPerms'
      responses:
        '200':
          description: Permission revoked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/systems/perms/{systemId}/user/{userName}/{permission}':
    delete:
      tags:
        - Permissions
      summary: Revoke system user permission
      description: |
        Remove system user permission from the Security Kernel. Requester must be owner of the system.
        Permissions are READ, MODIFY, EXECUTE.
      operationId: revokeUserPerm
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
        - name: permission
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Permission revoked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  # --- Paths for /schedulerProfile ------------------------------------------------
  '/v3/systems/schedulerProfile':
    get:
      tags:
        - Scheduler Profiles
      summary: Retrieve scheduler profiles
      description: Retrieve list of scheduler profiles.
      operationId: getSchedulerProfiles
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSchedulerProfiles'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - Scheduler Profiles
      summary: Create a scheduler profile
      description: |
        Create a scheduler profile using a request body. Name must be unique within a tenant and can be composed of
        alphanumeric characters and the following special characters [-._~].
        Name must begin with an alphabetic character and can be no more than 80 characters in length.
        Description is optional with a maximum length of 2048 characters.

        Note that certain attributes (such as tenant) are allowed but ignored so that the JSON result returned by a GET
        may be modified and used when making a POST request to create a profile.
        The attributes that are allowed but ignored are

          - tenant
          - uuid
          - created
          - updated
      operationId: createSchedulerProfile
      requestBody:
        required: true
        description: A JSON object specifying information for the profile to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPostSchedulerProfile'
      responses:
        '201':
          description: Scheduler profile created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '409':
          description: Scheduler profile already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/schedulerProfile/{name}':
    get:
      tags:
        - Scheduler Profiles
      summary: Retrieve a scheduler profile
      description: |
        Retrieve information for a scheduler profile given the profile name.
      operationId: getSchedulerProfile
      parameters:
        - name: name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSchedulerProfile'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Scheduler profile not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    delete:
      tags:
        - Scheduler Profiles
      summary: Delete a scheduler profile
      description: |
        Remove a scheduler profile given the profile name. Requester must be owner of the profile.
      operationId: deleteSchedulerProfile
      parameters:
        - name: name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: Scheduler profile deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

# ------------------------------------------------------------------------------
# --- Components ---------------------------------------------------------------
components:
  securitySchemes:
    TapisJWT:
      type: apiKey
      description: Tapis signed JWT token authentication
      name: X-Tapis-Token
      in: header
  schemas:
    # ------------------------------------------------------------------------------
    # --- Model objects ------------------------------------------------------------
    # ------------------------------------------------------------------------------
    # --- TapisSystem ------------------------------------------------------------------
    TapisSystem:
      type: object
      properties:
        tenant:
          type: string
        id:
          $ref: '#/components/schemas/IdString'
        description:
          $ref: '#/components/schemas/DescriptionString'
        systemType:
          $ref: '#/components/schemas/SystemTypeEnum'
        owner:
          $ref: '#/components/schemas/UserNameApiDefaultString'
        host:
          $ref: '#/components/schemas/HostString'
        enabled:
          type: boolean
          default: true
        effectiveUserId:
          $ref: '#/components/schemas/UserNameApiDefaultString'
        defaultAuthnMethod:
          $ref: '#/components/schemas/AuthnEnum'
        authnCredential:
          $ref: '#/components/schemas/Credential'
        bucketName:
          type: string
        rootDir:
          $ref: '#/components/schemas/DirString'
        port:
          type: integer
          format: int32
        useProxy:
          type: boolean
          default: false
        proxyHost:
          $ref: '#/components/schemas/HostString'
        proxyPort:
          type: integer
          format: int32
        dtnSystemId:
          $ref: '#/components/schemas/IdString'
        dtnMountPoint:
          type: string
        dtnMountSourcePath:
          type: string
        isDtn:
          type: boolean
          default: false
        canExec:
          type: boolean
        canRunBatch:
          type: boolean
          default: false
        mpiCmd:
          type: string
          minLength: 1
          maxLength: 126
        jobRuntimes:
          type: array
          minItems: 1
          uniqueItems: true
          items:
            $ref: '#/components/schemas/JobRuntime'
        jobWorkingDir:
          $ref: '#/components/schemas/DirString'
        jobEnvVariables:
          type: array
          items:
            $ref: '#/components/schemas/KeyValuePair'
        jobMaxJobs:
          type: integer
          default: 2147483647
        jobMaxJobsPerUser:
          type: integer
          default: 2147483647
        batchScheduler:
          $ref: '#/components/schemas/SchedulerTypeEnum'
        batchLogicalQueues:
          type: array
          items:
            $ref: '#/components/schemas/LogicalQueue'
        batchDefaultLogicalQueue:
          $ref: '#/components/schemas/QueueNameString'
        batchSchedulerProfile:
          $ref: '#/components/schemas/IdString'
        jobCapabilities:
          type: array
          items:
            $ref: '#/components/schemas/Capability'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagString'
        notes:
          type: object
        importRefId:
          type: string
        uuid:
          type: string
          format: uuid
        deleted:
          type: boolean
        created:
          type: string
        updated:
          type: string
    # --- JobRuntime ------------------------------------------------------------------
    JobRuntime:
      type: object
      required:
        - runtimeType
      properties:
        runtimeType:
          $ref: '#/components/schemas/RuntimeTypeEnum'
        version:
          type: string
    # --- SchedulerProfile ------------------------------------------------------------------
    SchedulerProfile:
      type: object
      required:
        - name
        - moduleLoadCommand
      properties:
        tenant:
          type: string
        name:
          $ref: '#/components/schemas/IdString'
        description:
          $ref: '#/components/schemas/DescriptionString'
        owner:
          $ref: '#/components/schemas/UserNameApiDefaultString'
        moduleLoadCommand:
          type: string
          minLength: 1
        modulesToLoad:
          type: array
          items:
            type: string
            minLength: 1
        hiddenOptions:
          type: array
          items:
            $ref: '#/components/schemas/SchedulerHiddenOptionEnum'
    # --- LogicalQueue ------------------------------------------------------------------
    LogicalQueue:
      type: object
      required:
        - name
        - hpcQueueName
      properties:
        name:
          $ref: '#/components/schemas/QueueNameString'
        hpcQueueName:
          $ref: '#/components/schemas/QueueNameString'
        maxJobs:
          type: integer
          default: 2147483647
        maxJobsPerUser:
          type: integer
          default: 2147483647
        minNodeCount:
          type: integer
        maxNodeCount:
          type: integer
        minCoresPerNode:
          type: integer
        maxCoresPerNode:
          type: integer
        minMemoryMB:
          type: integer
        maxMemoryMB:
          type: integer
        minMinutes:
          type: integer
        maxMinutes:
          type: integer
    # --- Capability ------------------------------------------------------------------
    Capability:
      type: object
      required:
        - category
        - name
        - datatype
      properties:
        category:
          $ref: '#/components/schemas/CategoryEnum'
        name:
          type: string
        datatype:
          $ref: '#/components/schemas/DatatypeEnum'
        precedence:
          type: integer
        value:
          type: string
    # --- Credential ------------------------------------------------------------------
    Credential:
      type: object
      properties:
        authnMethod:
          $ref: '#/components/schemas/AuthnEnum'
        password:
          type: string
        privateKey:
          type: string
        publicKey:
          type: string
        accessKey:
          type: string
        accessSecret:
          type: string
        certificate:
          type: string
    # --- KeyValuePair -------------------------------------------------------
    KeyValuePair:
      type: object
      required:
        - key
      properties:
        key:
          type: string
          minLength: 1
        value:
          type: string
          default: ""

    # --- String types with constraints ------------------------------------
    HostString:
      type: string
      minLength: 1
      maxLength: 256
    IdString:
      type: string
      minLength: 1
      maxLength: 80
    UserNameString:
      type: string
      minLength: 1
      maxLength: 60
    UserNameApiDefaultString:
      type: string
      minLength: 1
      maxLength: 60
      default: "${apiUserId}"
    DescriptionString:
      type: string
      maxLength: 2048
    DirString:
      type: string
      minLength: 1
      maxLength: 4096
    TagString:
      type: string
      minLength: 1
      maxLength: 128
    QueueNameString:
      type: string
      minLength: 1
      maxLength: 128

    # -------------------------------------------------------------------------
    # --- Request objects -----------------------------------------------------
    # -------------------------------------------------------------------------
    ReqPostSystem:
      type: object
      required:
        - id
        - systemType
        - host
        - defaultAuthnMethod
        - canExec
      properties:
        id:
          $ref: '#/components/schemas/IdString'
        description:
          $ref: '#/components/schemas/DescriptionString'
        systemType:
          $ref: '#/components/schemas/SystemTypeEnum'
        owner:
          type: string
        host:
          $ref: '#/components/schemas/HostString'
        enabled:
          type: boolean
          default: true
        effectiveUserId:
          $ref: '#/components/schemas/UserNameString'
        defaultAuthnMethod:
          $ref: '#/components/schemas/AuthnEnum'
        authnCredential:
          $ref: '#/components/schemas/ReqPostCredential'
        bucketName:
          type: string
        rootDir:
          $ref: '#/components/schemas/DirString'
        port:
          type: integer
          format: int32
        useProxy:
          type: boolean
          default: false
        proxyHost:
          $ref: '#/components/schemas/HostString'
        proxyPort:
          type: integer
          format: int32
        dtnSystemId:
          $ref: '#/components/schemas/IdString'
        dtnMountPoint:
          type: string
        dtnMountSourcePath:
          type: string
        isDtn:
          type: boolean
          default: false
        canExec:
          type: boolean
        canRunBatch:
          type: boolean
          default: false
        mpiCmd:
          type: string
          minLength: 1
          maxLength: 126
        jobRuntimes:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/JobRuntime'
        jobWorkingDir:
          $ref: '#/components/schemas/DirString'
        jobEnvVariables:
          type: array
          items:
            $ref: '#/components/schemas/KeyValuePair'
        jobMaxJobs:
          type: integer
        jobMaxJobsPerUser:
          type: integer
        batchScheduler:
          $ref: '#/components/schemas/SchedulerTypeEnum'
        batchLogicalQueues:
          type: array
          items:
            $ref: '#/components/schemas/LogicalQueue'
        batchDefaultLogicalQueue:
          $ref: '#/components/schemas/QueueNameString'
        batchSchedulerProfile:
          $ref: '#/components/schemas/IdString'
        jobCapabilities:
          type: array
          items:
            $ref: '#/components/schemas/Capability'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagString'
        notes:
          type: object
        importRefId:
          type: string
    ReqPutSystem:
      type: object
      properties:
        description:
          $ref: '#/components/schemas/DescriptionString'
        host:
          $ref: '#/components/schemas/HostString'
        effectiveUserId:
          $ref: '#/components/schemas/UserNameString'
        defaultAuthnMethod:
          $ref: '#/components/schemas/AuthnEnum'
        authnCredential:
          $ref: '#/components/schemas/ReqPostCredential'
        port:
          type: integer
          format: int32
        useProxy:
          type: boolean
          default: false
        proxyHost:
          $ref: '#/components/schemas/HostString'
        proxyPort:
          type: integer
          format: int32
        dtnSystemId:
          $ref: '#/components/schemas/IdString'
        dtnMountPoint:
          type: string
        dtnMountSourcePath:
          type: string
        canRunBatch:
          type: boolean
          default: false
        mpiCmd:
          type: string
          minLength: 1
          maxLength: 126
        jobRuntimes:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/JobRuntime'
        jobWorkingDir:
          $ref: '#/components/schemas/DirString'
        jobEnvVariables:
          type: array
          items:
            $ref: '#/components/schemas/KeyValuePair'
        jobMaxJobs:
          type: integer
        jobMaxJobsPerUser:
          type: integer
        batchScheduler:
          $ref: '#/components/schemas/SchedulerTypeEnum'
        batchLogicalQueues:
          type: array
          items:
            $ref: '#/components/schemas/LogicalQueue'
        batchDefaultLogicalQueue:
          $ref: '#/components/schemas/QueueNameString'
        batchSchedulerProfile:
          $ref: '#/components/schemas/IdString'
        jobCapabilities:
          type: array
          items:
            $ref: '#/components/schemas/Capability'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagString'
        notes:
          type: object
        importRefId:
          type: string
    ReqPatchSystem:
      type: object
      properties:
        description:
          $ref: '#/components/schemas/DescriptionString'
        host:
          $ref: '#/components/schemas/HostString'
        effectiveUserId:
          $ref: '#/components/schemas/UserNameString'
        defaultAuthnMethod:
          $ref: '#/components/schemas/AuthnEnum'
        port:
          type: integer
          format: int32
        useProxy:
          type: boolean
        proxyHost:
          $ref: '#/components/schemas/HostString'
        proxyPort:
          type: integer
          format: int32
        dtnSystemId:
          $ref: '#/components/schemas/IdString'
        dtnMountPoint:
          type: string
        dtnMountSourcePath:
          type: string
        canRunBatch:
          type: boolean
        mpiCmd:
          type: string
          minLength: 1
          maxLength: 126
        jobRuntimes:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/JobRuntime'
        jobWorkingDir:
          $ref: '#/components/schemas/DirString'
        jobEnvVariables:
          type: array
          items:
            $ref: '#/components/schemas/KeyValuePair'
        jobMaxJobs:
          type: integer
        jobMaxJobsPerUser:
          type: integer
        batchScheduler:
          $ref: '#/components/schemas/SchedulerTypeEnum'
        batchLogicalQueues:
          type: array
          items:
            $ref: '#/components/schemas/LogicalQueue'
        batchDefaultLogicalQueue:
          $ref: '#/components/schemas/QueueNameString'
        batchSchedulerProfile:
          $ref: '#/components/schemas/IdString'
        jobCapabilities:
          type: array
          items:
            $ref: '#/components/schemas/Capability'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagString'
        notes:
          type: object
        importRefId:
          type: string
    ReqPostCredential:
      type: object
      properties:
        password:
          type: string
        privateKey:
          type: string
        publicKey:
          type: string
        accessKey:
          type: string
        accessSecret:
          type: string
        certificate:
          type: string
    ReqPerms:
      type: object
      required:
        - permissions
      properties:
        permissions:
          type: array
          minItems: 1
          items:
            type: string
    ReqSearchSystems:
      type: object
      required:
        - search
      properties:
        search:
          type: array
          minItems: 1
          items:
            type: string
    ReqMatchConstraints:
      type: object
      required:
        - match
      properties:
        match:
          type: array
          minItems: 1
          items:
            type: string
    ReqPostSchedulerProfile:
      type: object
      required:
        - name
        - moduleLoadCommand
      properties:
        name:
          $ref: '#/components/schemas/IdString'
        description:
          $ref: '#/components/schemas/DescriptionString'
        owner:
          type: string
        moduleLoadCommand:
          type: string
          minLength: 1
        modulesToLoad:
          type: array
          items:
            type: string
            minLength: 1
        hiddenOptions:
          type: array
          items:
            $ref: '#/components/schemas/SchedulerHiddenOptionEnum'

    # -------------------------------------------------------------------------
    # --- Response objects ----------------------------------------------------
    # -------------------------------------------------------------------------
    RespBasic:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          type: object
        metadata:
          type: object
    RespBoolean:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/ResultBoolean'
        metadata:
          type: object
    ResultBoolean:
      type: object
      properties:
        aBool:
          type: boolean
    RespNameArray:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/ResultNameArray'
        metadata:
          type: object
    ResultNameArray:
      type: object
      properties:
        names:
          type: array
          items:
            type: string
    RespChangeCount:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/ResultChangeCount'
        metadata:
          type: object
    ResultChangeCount:
      type: object
      properties:
        changes:
          type: integer
          format: int32
    RespResourceUrl:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/ResultResourceUrl'
        metadata:
          type: object
    ResultResourceUrl:
      type: object
      properties:
        url:
          type: string
    RespSystem:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/TapisSystem'
        metadata:
          type: object
    RespSystems:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/TapisSystem'
        metadata:
          type: object
          properties:
            recordCount:
              type: integer
            recordLimit:
              type: integer
            recordsSkipped:
              type: integer
            orderBy:
              type: string
            startAfter:
              type: string
            totalCount:
              type: integer
    RespCredential:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/Credential'
        metadata:
          type: object
    RespSchedulerProfile:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/SchedulerProfile'
        metadata:
          type: object
    RespSchedulerProfiles:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/SchedulerProfile'
        metadata:
          type: object
    # -------------------------------------------------------------------------
    # --- Enums ---------------------------------------------------------------
    # -------------------------------------------------------------------------
    SystemTypeEnum:
      type: string
      enum:
        - LINUX
        - S3
        - IRODS
        - GLOBUS
    AuthnEnum:
      type: string
      enum:
        - PASSWORD
        - PKI_KEYS
        - ACCESS_KEY
        - CERT
    CategoryEnum:
      type: string
      enum:
        - SCHEDULER
        - OS
        - HARDWARE
        - SOFTWARE
        - JOB
        - CONTAINER
        - MISC
        - CUSTOM
    DatatypeEnum:
      type: string
      enum:
        - STRING
        - INTEGER
        - BOOLEAN
        - NUMBER
        - TIMESTAMP
    RuntimeTypeEnum:
      type: string
      enum:
        - DOCKER
        - SINGULARITY
    SchedulerTypeEnum:
      type: string
      enum:
        - SLURM
        - CONDOR
        - PBS
        - SGE
        - UGE
        - TORQUE
    SchedulerHiddenOptionEnum:
      type: string
      enum:
        - MEM
